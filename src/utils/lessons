# ALPHA VERSION CODEBASE LESSONS & INSIGHTS
# ===================================
# This file records important learnings about the codebase

## Alpha Version Architecture
1. The application follows a modular architecture with clear separation of concerns
2. UI components are managed by specialized controller classes
3. Simulation logic is encapsulated in the SimulationEngine
4. Component system provides extensible power system modeling

BorderedMainWidget uses a flash system with different color palettes for different types of notifications, with timer-based animations.

UI animations with sequential color changes can create a more visually engaging effect than alternating patterns
Component initialization order is critical - ensure windows are fully initialized before loading scenarios to prevent display issues
QTimer.singleShot() can be used to create sequential animations without the need for a dedicated animation framework
When animating UI components that have functional signals, temporarily disconnect them to prevent unintended side effects during animations

Alpha users need clear instructions on bypassing OS security for unsigned apps (Windows/macOS).

Tab key can cause issues as a global hotkey when compiled on Windows; switched to Backslash.
README needs sufficient detail on core features like panels, views, Autocomplete, and metrics (CAPEX/IRR) for alpha users.

- Noted that README.txt now utilizes emojis and reorganized sections for better alpha user guidance.

- GitHub Actions workflows should include documentation files (like README.txt) alongside executables in distribution artifacts.

macOS ditto command can't archive multiple source files directly - use zip instead for packaging multiple files together

Refactoring property handler methods into separate modules improves maintainability while keeping same API for component integration

The pattern for extracting component properties involves creating a dedicated function in a separate file and updating the original method to import and call this function.

For syncing animations between components, it's better to create a central update method than duplicate animation logic.

Using the singleton pattern with static class variables (_instance) allows accessing UI components from anywhere without passing references.
The TerminalWidget._instance pattern enables logging from any part of the app without direct references, useful for component addition tracking.

Use TerminalWidget.log() for error messages instead of QMessageBox to show errors in the terminal UI component.
